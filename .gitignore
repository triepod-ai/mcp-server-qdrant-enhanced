# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# Project-specific settings
.aider*

**/.claude/settings.local.json

# MCP and local configuration
.mcp.json
.env
.env.*
*.env
.env.local
.env.*.local

# Build and log files
build.log
*.log
logs/
*.log.*

# Docker overrides
docker-compose.override.yml
docker-compose.*.override.yml

# Qdrant storage
qdrant_storage/
qdrant_data/
storage/
data/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# User-specific workspace files
*.code-workspace

# Shell script logs
*.out
*.err

# Test outputs
test-results/
test-output/

# Cache directories
.cache/
cache/

# Local virtual environments
.venv/
venv/
env/
.virtualenv/

# Python version files
.python-version

# Pre-commit
.pre-commit-config.yaml

# Lock files (keep uv.lock in repo)
.lock
!uv.lock

# Personal/private directories
private/
personal/
local/

# Backup files
*.bak
*.backup
*~
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db
desktop.ini

# IDE specific
.vscode/
.idea/
*.sublime-*

# Coverage reports
.coverage
coverage/
htmlcov/
*.cover
.coverage.*

# Distribution
dist/
build/
*.egg-info/

# Pytest
.pytest_cache/
pytest.ini

# MyPy
.mypy_cache/
.dmypy.json
dmypy.json

# Jupyter
.ipynb_checkpoints/
*.ipynb

# Secrets and credentials
secrets/
credentials/
*.pem
*.key
*.cert
*.crt

# Installation artifacts
install.log
setup.log

# Runtime files
*.pid
*.sock
*.socket

# Enhanced MCP Server specific ignores

# Node.js/NPM build artifacts
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.npm
.eslintcache
.node_repl_history
*.tgz
.yarn-integrity
package-lock.json
yarn.lock

# Docker development files
docker-compose.dev.yml
docker-compose.*.yml
!docker-compose.enhanced.yml

# FastEmbed model cache and downloads
.fastembed_cache/
models/
*.bin
*.onnx
*.safetensors
*.model

# Generated configuration files
claude_desktop_config.json
vscode_mcp_settings.json
*_config_generated.json
*_generated.json

# Build and publish artifacts
*.tar.gz
*.zip
*.dmg
*.pkg
*.deb
*.rpm

# ML/AI model files
*.pt
*.pth
*.pkl
*.pickle
*.h5
*.hdf5

# Large binary files
*.iso
*.img
*.qcow2
*.vmdk

# Generated documentation
docs/generated/
api-docs/

# Development database files
*.db
*.sqlite
*.sqlite3

# Container logs and data
container-logs/
docker-data/

# Setup script generated files
setup-*.log
installation-*.log

# GitHub Actions artifacts
.github/workflows/generated_*

# Package manager caches
.pnpm-store/
.yarn/cache/
.npm/_cacache/

# Development tools output
.ruff_cache/
.mypy_cache/
.pytest_cache/

# Local development overrides
local-config/
dev-config/
override/
@todo.md